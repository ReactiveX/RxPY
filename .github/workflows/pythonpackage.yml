name: Python package

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9, "3.10", pypy-3.8]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            ~/Library/Caches/pypoetry
            C:\Users\*\AppData\Local\pypoetry\Cache
          key: poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Check formatting
        run: |
          poetry run black --check --verbose rx
          poetry run isort --check rx

      - name: Check type annotations (mypy & pyright)
        run: |
          poetry run pyright
          poetry run mypy

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          poetry run pytest -n auto

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Run coverage tests
        run: |
          poetry run coverage run -m pytest

      - name: Coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_SERVICE_NAME: github
        run: |
          poetry run coveralls
